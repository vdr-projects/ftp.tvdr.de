--- i18n.c	2003/04/12 09:39:35	1.105
+++ i18n.c	2003/04/21 14:05:17	1.106
@@ -3410,6 +3410,22 @@
     "Söker igenom inspelningarna...",
     "Caut inregistrari...",
     "Felvett adások böngészése...",
+  },
+  { "Pausing live video...",
+    "Live-Signal wird angehalten...",
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
+    "",// TODO
   },
   { "This plugin has no setup parameters!",
     "Dieses Plugin hat keine Setup-Parameter!",
--- menu.h	2003/01/12 14:54:05	1.53
+++ menu.h	2003/04/21 13:40:45	1.54
@@ -135,6 +135,7 @@
   static void Stop(const char *InstantId);
   static void Stop(cDevice *Device);
   static bool StopPrimary(bool DoIt = false);
+  static bool PauseLiveVideo(void);
   static const char *GetInstantId(const char *LastInstantId);
   static cRecordControl *GetRecordControl(const char *FileName);
   static void Process(time_t t);
--- menu.c	2003/04/20 09:21:36	1.236
+++ menu.c	2003/04/21 14:57:13	1.237
@@ -2488,7 +2488,7 @@
 
   // Color buttons:
 
-  SetHelp(tr("Record"), cDevice::PrimaryDevice()->NumAudioTracks() > 1 ? tr("Language") : NULL, NULL, replaying ? tr("Button$Stop") : cReplayControl::LastReplayed() ? tr("Resume") : NULL);
+  SetHelp(tr("Record"), cDevice::PrimaryDevice()->NumAudioTracks() > 1 ? tr("Language") : NULL, replaying ? NULL : tr("Pause"), replaying ? tr("Button$Stop") : cReplayControl::LastReplayed() ? tr("Resume") : NULL);
   Display();
   lastActivity = time(NULL);
 }
@@ -2560,6 +2560,9 @@
                                    }
                                 }
                              break;
+               case kYellow: if (!HasSubMenu())
+                                state = osPause;
+                             break;
                case kBlue:   if (!HasSubMenu())
                                 state = replaying ? osStopReplay : cReplayControl::LastReplayed() ? osReplay : osContinue;
                              break;
@@ -2936,6 +2939,8 @@
   if (device->AttachReceiver(recorder)) {
      Recording.WriteSummary();
      cStatus::MsgRecording(device, Recording.Name());
+     if (!Timer && !cReplayControl::LastReplayed()) // an instant recording, maybe from cRecordControls::PauseLiveVideo()
+        cReplayControl::SetRecording(fileName, Recording.Name());
      }
   else
      DELETENULL(recorder);
@@ -3070,6 +3075,26 @@
         return true;
         }
      }
+  return false;
+}
+
+bool cRecordControls::PauseLiveVideo(void)
+{
+  Interface->Open(Setup.OSDwidth, -1);
+  Interface->Status(tr("Pausing live video..."));
+  Interface->Flush();
+  cReplayControl::SetRecording(NULL, NULL); // make sure the new cRecordControl will set cReplayControl::LastReplayed()
+  if (Start()) {
+     sleep(2); // allow recorded file to fill up enough to start replaying
+     cReplayControl *rc = new cReplayControl;
+     cControl::Launch(rc);
+     cControl::Attach();
+     sleep(1); // allow device to replay some frames, so we have a picture
+     Interface->Close();
+     rc->ProcessKey(kPause); // pause, allowing replay mode display
+     return true;
+     }
+  Interface->Close();
   return false;
 }
 
--- osd.h	2002/12/08 12:21:26	1.38
+++ osd.h	2003/04/21 10:27:41	1.39
@@ -30,6 +30,7 @@
                 osPlugin,
                 osSetup,
                 osCommands,
+                osPause,
                 osRecord,
                 osReplay,
                 osStopRecord,
--- vdr.c	2003/04/12 13:57:45	1.149
+++ vdr.c	2003/04/21 14:41:41	1.150
@@ -553,6 +553,26 @@
                cDisplayVolume::Process(key);
                key = kNone; // nobody else needs to see these keys
                break;
+          // Pausing live video:
+          case kPause:
+               if (!cControl::Control()) {
+                  DELETENULL(Menu);
+                  Temp = NULL;
+                  if (!cRecordControls::PauseLiveVideo())
+                     Interface->Error(tr("No free DVB device to record!"));
+                  key = kNone; // nobody else needs to see this key
+                  }
+               break;
+          // Instant recording:
+          case kRecord:
+               if (!cControl::Control()) {
+                  if (cRecordControls::Start())
+                     ;//XXX Interface->Info(tr("Recording"));
+                  else
+                     Interface->Error(tr("No free DVB device to record!"));
+                  key = kNone; // nobody else needs to see this key
+                  }
+               break;
           // Power off:
           case kPower: isyslog("Power button pressed");
                        DELETENULL(Menu);
@@ -577,6 +597,12 @@
            if (state == osUnknown && ISMODELESSKEY(key) && cControl::Control() && Interact != cControl::Control())
               state = cControl::Control()->ProcessKey(key);
            switch (state) {
+             case osPause:  DELETENULL(Menu);
+                            cControl::Shutdown(); // just in case
+                            Temp = NULL;
+                            if (!cRecordControls::PauseLiveVideo())
+                               Interface->Error(tr("No free DVB device to record!"));
+                            break;
              case osRecord: DELETENULL(Menu);
                             Temp = NULL;
                             if (cRecordControls::Start())
@@ -652,13 +678,6 @@
                   break;
              // Viewing Control:
              case kOk:   LastChannel = -1; break; // forces channel display
-             // Instant recording:
-             case kRecord:
-                  if (cRecordControls::Start())
-                     ;//XXX Interface->Info(tr("Recording"));
-                  else
-                     Interface->Error(tr("No free DVB device to record!"));
-                  break;
              // Key macros:
              case kRed:
              case kGreen:
